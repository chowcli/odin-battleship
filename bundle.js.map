{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://odin-battleship/./src/components/DOM/boardDOM.js","webpack://odin-battleship/./src/components/ship.js","webpack://odin-battleship/./src/components/supportFnc.js","webpack://odin-battleship/./src/components/player.js","webpack://odin-battleship/./src/components/gameBoard.js","webpack://odin-battleship/./src/components/DOM/battleHandler.js","webpack://odin-battleship/./src/components/DOM/shipPlacementHandler.js","webpack://odin-battleship/./src/index.js"],"sourcesContent":["/* eslint-disable no-plusplus */\nfunction createBoardDOM(boardContainer) {\n  boardContainer.innerHTML = \"\";\n\n  for (let y = 0; y < 10; y++) {\n    for (let x = 0; x < 10; x++) {\n      const div = document.createElement(\"div\");\n      div.classList.add(\"cell\", \"empty\");\n      div.setAttribute(\"data-y\", y);\n      div.setAttribute(\"data-x\", x);\n\n      boardContainer.appendChild(div);\n    }\n  }\n}\n\nexport default createBoardDOM;\n","const Ship = (name, length) => {\n  const shipName = name.toLowerCase();\n  const shipLength = length;\n  let shipLives = shipLength;\n\n  const getName = () => shipName;\n  const getLength = () => shipLength;\n  const getLives = () => shipLives;\n\n  function isHit() {\n    if (shipLives > 0) shipLives -= 1;\n  }\n\n  function isSunk() {\n    return shipLives === 0;\n  }\n\n  return { getName, getLength, getLives, isHit, isSunk };\n};\n\nexport default Ship;\n","/* eslint-disable no-plusplus */\nfunction create2DArray() {\n  const gameBoard = new Array(10);\n\n  for (let i = 0; i < 10; i++) {\n    gameBoard[i] = new Array(10).fill(\"\");\n  }\n\n  return gameBoard;\n}\n\nfunction isOutOfBounds(srtX, srtY, axis, shipLength) {\n  const srtPoint = axis === \"x\" ? srtX : srtY;\n  return srtPoint + shipLength - 1 >= 10;\n}\n\nfunction isOverlap(gameBoard, srtX, srtY, axis, shipLength) {\n  let x;\n  let y;\n\n  for (let i = 0; i < shipLength; i++) {\n    x = axis === \"x\" ? srtX + i : srtX;\n    y = axis === \"x\" ? srtY : srtY + i;\n\n    if (gameBoard[y][x] !== \"\") return true;\n  }\n\n  return false;\n}\n\nfunction isValidPlacement(gameBoard, x, y, axis, shipLength) {\n  return !isOutOfBounds(x, y, axis, shipLength) && !isOverlap(gameBoard, x, y, axis, shipLength);\n}\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction isEndGame(gameBoard1, gameBoard2) {\n  if (gameBoard1.areAllSunk()) return 2; // player 1 lose mean return player 2 winner\n  if (gameBoard2.areAllSunk()) return 1;\n\n  return false;\n}\n\nfunction getRandomCoords() {\n  return Math.floor(Math.random() * 10);\n}\n\nexport { create2DArray, isValidPlacement, capitalize, isEndGame, getRandomCoords };\n","/* eslint-disable no-plusplus */\nimport Ship from \"./ship\";\nimport Gameboard from \"./gameBoard\";\nimport { getRandomCoords } from \"./supportFnc\";\n\nconst Player = (type = \"human\") => {\n  const playerType = type;\n  const boardObject = Gameboard();\n  let enemyBoard;\n\n  const getType = () => playerType;\n  const getBoard = () => boardObject;\n\n  function prepareFleet() {\n    const fleet = [\n      Ship(\"carrier\", 5),\n      Ship(\"battleship\", 4),\n      Ship(\"destroyer\", 3),\n      Ship(\"submarine\", 3),\n      Ship(\"patrol boat\", 2),\n    ];\n\n    boardObject.addToFleet(...fleet);\n  }\n\n  function setEnemyBoard(board) {\n    enemyBoard = board;\n  }\n\n  function attack(x, y) {\n    return enemyBoard.receiveAttack(x, y);\n  }\n\n  // AI method\n\n  function randomShipPlacement() {\n    const fleet = boardObject.getFleet();\n    const occupiedPositions = [];\n\n    fleet.forEach(ship => {\n      let isPlacementSuccessful = false;\n\n      while (!isPlacementSuccessful) {\n        const srtX = getRandomCoords();\n        const srtY = getRandomCoords();\n        const axis = Math.random() < 0.5 ? \"x\" : \"y\";\n\n        const isTooClose = occupiedPositions.some(({ x, y }) => Math.abs(x - srtX) < 2 && Math.abs(y - srtY) < 2);\n\n        if (!isTooClose) {\n          isPlacementSuccessful = boardObject.placeShip(ship, srtX, srtY, axis);\n\n          if (isPlacementSuccessful) {\n            let x;\n            let y;\n\n            for (let i = 0; i < ship.getLength(); i++) {\n              x = axis === \"x\" ? srtX + i : srtX;\n              y = axis === \"x\" ? srtY : srtY + i;\n\n              occupiedPositions.push({ x, y });\n            }\n          }\n        }\n      }\n    });\n  }\n\n  function randomAttack() {\n    let attackSuccessful = 0;\n    let x;\n    let y;\n\n    while (attackSuccessful === 0) {\n      x = getRandomCoords();\n      y = getRandomCoords();\n\n      attackSuccessful = attack(x, y);\n    }\n\n    return { x, y, attackSuccessful };\n  }\n\n  return {\n    getType,\n    getBoard,\n    prepareFleet,\n    setEnemyBoard,\n    ...(playerType === \"human\" ? { attack } : { randomAttack, randomShipPlacement }),\n  };\n};\n\nexport default Player;\n","/* eslint-disable no-plusplus */\nimport { create2DArray, isValidPlacement } from \"./supportFnc\";\n\nconst Gameboard = () => {\n  const gameBoard = create2DArray();\n  const fleet = [];\n\n  const getBoard = () => gameBoard;\n  const getFleet = () => fleet;\n\n  function getShip(shipName) {\n    return fleet.find(ship => ship.getName() === shipName);\n  }\n\n  function addToFleet(...ships) {\n    fleet.push(...ships);\n  }\n\n  function placeShip(ship, srtX, srtY, axis) {\n    const shipLength = ship.getLength();\n    const shipName = ship.getName();\n\n    if (isValidPlacement(gameBoard, srtX, srtY, axis, shipLength)) {\n      let x;\n      let y;\n\n      for (let i = 0; i < shipLength; i++) {\n        x = axis === \"x\" ? srtX + i : srtX;\n        y = axis === \"x\" ? srtY : srtY + i;\n\n        gameBoard[y][x] = { type: shipName, isHit: false };\n      }\n\n      return true; // Placement was successful\n    }\n\n    return false; // Placement failed\n  }\n\n  function receiveAttack(x, y) {\n    const cell = gameBoard[y][x];\n\n    if (cell === \"\") {\n      gameBoard[y][x] = 0;\n      return 2; // miss\n    }\n\n    if (cell.isHit === false) {\n      cell.isHit = true;\n      getShip(cell.type).isHit();\n\n      return 1; // hit\n    }\n\n    return 0; // attack unsuccessful\n  }\n\n  function areAllSunk() {\n    return fleet.every(ship => ship.isSunk());\n  }\n\n  return { getBoard, getFleet, getShip, addToFleet, placeShip, receiveAttack, areAllSunk };\n};\n\nexport default Gameboard;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\nimport createBoardDOM from \"./boardDOM\";\nimport Player from \"../player\";\nimport shipPlacementHandler from \"./shipPlacementHandler\";\nimport { isEndGame } from \"../supportFnc\";\nimport \"../../styles/modal.css\";\n\nfunction initializePlayer() {\n  const player1 = Player();\n  const player2 = Player(\"computer\");\n\n  player1.prepareFleet();\n  player2.prepareFleet();\n\n  player1.setEnemyBoard(player2.getBoard());\n  player2.setEnemyBoard(player1.getBoard());\n\n  player2.randomShipPlacement();\n\n  return { player1, player2 };\n}\n\nfunction BattlefieldHandler() {\n  const { player1: humanPlayer, player2: computerPlayer } = initializePlayer();\n  const playerBoard = humanPlayer.getBoard();\n  const computerBoard = computerPlayer.getBoard();\n\n  const shipPlacementDialog = document.querySelector(\".ship-placement-dialog\");\n  shipPlacementDialog.showModal();\n\n  const playerBoardDOM = document.querySelector(\".player-board\");\n  const computerBoardDOM = document.querySelector(\".computer-board\");\n\n  createBoardDOM(playerBoardDOM);\n  createBoardDOM(computerBoardDOM);\n  createBoardDOM(shipPlacementDialog.querySelector(\".ship-board\"));\n\n  shipPlacementHandler(shipPlacementDialog, playerBoard, playerBoardDOM);\n\n  let isUserTurn = true;\n  let userClickCount = 0;\n\n  function handleComputerAttack() {\n    if (isUserTurn) return;\n\n    const { x, y, attackSuccessful } = computerPlayer.randomAttack();\n    const className = attackSuccessful === 1 ? \"hit\" : \"missed\";\n\n    const cell = playerBoardDOM.querySelector(`.cell[data-y=\"${y}\"][data-x=\"${x}\"]`);\n    cell.classList.add(className);\n\n    isUserTurn = true;\n  }\n\n  function handleUserAttack(event) {\n    if (!event.target.classList.contains(\"cell\")) return;\n\n    const cell = event.target;\n\n    if (cell.classList.contains(\"hit\") || cell.classList.contains(\"missed\")) return;\n\n    const x = parseInt(cell.dataset.x, 10);\n    const y = parseInt(cell.dataset.y, 10);\n\n    const className = humanPlayer.attack(x, y) === 1 ? \"hit\" : \"missed\";\n\n    cell.classList.add(className);\n\n    isUserTurn = false;\n    userClickCount++;\n  }\n\n  function displayWinner() {\n    const winner = isEndGame(playerBoard, computerBoard);\n\n    if (winner) {\n      const resetGameDialog = document.querySelector(\".reset-game-dialog\");\n      const h3 = resetGameDialog.querySelector(\"h3\");\n      const resetBtn = resetGameDialog.querySelector(\"button\");\n\n      if (winner === 1) {\n        h3.textContent = \"Congratulations You Won!\";\n      } else {\n        h3.textContent = \"Computer Won!\";\n      }\n\n      resetGameDialog.showModal();\n\n      resetBtn.addEventListener(\"click\", () => {\n        window.location.reload();\n      });\n    }\n  }\n\n  function gameRound(event) {\n    handleUserAttack(event);\n    handleComputerAttack();\n\n    if (userClickCount >= 17) displayWinner();\n  }\n\n  computerBoardDOM.addEventListener(\"click\", gameRound);\n}\n\nexport default BattlefieldHandler;\n","/* eslint-disable no-plusplus */\nimport { capitalize, isValidPlacement } from \"../supportFnc\";\n\nfunction highlightCells(srtX, srtY, axis, playerBoard, shipLength, shipBoardDOM) {\n  let x;\n  let y;\n\n  const className = isValidPlacement(playerBoard, srtX, srtY, axis, shipLength) ? \"valid\" : \"invalid\";\n\n  for (let i = 0; i < shipLength; i++) {\n    x = axis === \"x\" ? srtX + i : srtX;\n    y = axis === \"x\" ? srtY : srtY + i;\n\n    if (x >= 10 || y >= 10) break;\n\n    const cell = shipBoardDOM.querySelector(`.cell[data-y=\"${y}\"][data-x=\"${x}\"]`);\n    cell.classList.add(className);\n  }\n}\n\nfunction removeHighLight(srtX, srtY, axis, shipLength, shipBoardDOM) {\n  let x;\n  let y;\n\n  for (let i = 0; i < shipLength; i++) {\n    x = axis === \"x\" ? srtX + i : srtX;\n    y = axis === \"x\" ? srtY : srtY + i;\n\n    if (x >= 10 || y >= 10) break;\n\n    const cell = shipBoardDOM.querySelector(`.cell[data-y=\"${y}\"][data-x=\"${x}\"]`);\n    cell.classList.remove(\"valid\", \"invalid\");\n  }\n}\n\nfunction highLightShipCell(srtX, srtY, axis, currShip, shipBoardDOM, playerBoardDOM) {\n  let x;\n  let y;\n\n  for (let i = 0; i < currShip.getLength(); i++) {\n    x = axis === \"x\" ? srtX + i : srtX;\n    y = axis === \"x\" ? srtY : srtY + i;\n\n    // shipBoardDOM\n    const cell = shipBoardDOM.querySelector(`.cell[data-y=\"${y}\"][data-x=\"${x}\"]`);\n    cell.classList.remove(\"empty\");\n    cell.setAttribute(\"data-ship\", currShip.getName());\n\n    // playerBoardDOM\n    const pCell = playerBoardDOM.querySelector(`.cell[data-y=\"${y}\"][data-x=\"${x}\"]`);\n    pCell.classList.remove(\"empty\");\n    pCell.setAttribute(\"data-ship\", currShip.getName());\n  }\n}\n\nfunction shipPlacementHandler(shipPlacementDialog, playerBoard, playerBoardDOM) {\n  const instruction = shipPlacementDialog.querySelector(\".instruction\");\n  const changeAxis = shipPlacementDialog.querySelector(\".change-axis\");\n  const shipBoardDOM = shipPlacementDialog.querySelector(\".ship-board\");\n\n  const fleet = playerBoard.getFleet();\n  let currShipIndex = 0;\n  let currShip = fleet[currShipIndex];\n  let isHorizontal = true;\n\n  const updateInstruction = () => {\n    instruction.textContent = `Place your ${capitalize(currShip.getName())}`;\n  };\n\n  changeAxis.addEventListener(\"click\", () => {\n    isHorizontal = !isHorizontal;\n    changeAxis.textContent = isHorizontal ? \"Axis: X\" : \"Axis: Y\";\n  });\n\n  function handleHover(event) {\n    if (!event.target.classList.contains(\"cell\")) return;\n\n    const x = parseInt(event.target.dataset.x, 10);\n    const y = parseInt(event.target.dataset.y, 10);\n    const axis = isHorizontal ? \"x\" : \"y\";\n\n    highlightCells(x, y, axis, playerBoard.getBoard(), currShip.getLength(), shipBoardDOM);\n  }\n\n  function handlePointerOut(event) {\n    if (!event.target.classList.contains(\"cell\")) return;\n\n    const x = parseInt(event.target.dataset.x, 10);\n    const y = parseInt(event.target.dataset.y, 10);\n    const axis = isHorizontal ? \"x\" : \"y\";\n\n    removeHighLight(x, y, axis, currShip.getLength(), shipBoardDOM);\n  }\n\n  function placeShipHandler(event) {\n    if (!event.target.classList.contains(\"cell\")) return;\n\n    const srtX = parseInt(event.target.dataset.x, 10);\n    const srtY = parseInt(event.target.dataset.y, 10);\n    const axis = isHorizontal ? \"x\" : \"y\";\n\n    // 2D Array\n    const isSuccessful = playerBoard.placeShip(currShip, srtX, srtY, axis);\n\n    // shipBoardDOM and playerBoardDOM\n    if (isSuccessful) {\n      highLightShipCell(srtX, srtY, axis, currShip, shipBoardDOM, playerBoardDOM);\n\n      currShipIndex++;\n\n      if (currShipIndex === 5) shipPlacementDialog.close();\n      else {\n        currShip = fleet[currShipIndex];\n        updateInstruction();\n      }\n    }\n  }\n\n  shipBoardDOM.addEventListener(\"pointerover\", handleHover);\n  shipBoardDOM.addEventListener(\"pointerout\", handlePointerOut);\n  shipBoardDOM.addEventListener(\"click\", placeShipHandler);\n}\n\nexport default shipPlacementHandler;\n","import battlefieldHandler from \"./components/DOM/battleHandler\";\nimport \"./styles/main.css\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => battlefieldHandler());\n"],"names":["boardContainer","innerHTML","y","x","div","document","createElement","classList","add","setAttribute","appendChild","name","length","shipName","toLowerCase","shipLength","shipLives","getName","getLength","getLives","isHit","isSunk","isValidPlacement","gameBoard","axis","srtX","srtY","isOutOfBounds","i","isOverlap","getRandomCoords","Math","floor","random","enemyBoard","playerType","arguments","undefined","boardObject","Array","fill","create2DArray","fleet","getShip","find","ship","getBoard","getFleet","addToFleet","push","apply","placeShip","type","receiveAttack","cell","areAllSunk","every","Gameboard","attack","_objectSpread","getType","prepareFleet","Ship","setEnemyBoard","board","randomAttack","attackSuccessful","randomShipPlacement","occupiedPositions","forEach","isPlacementSuccessful","_loop","isTooClose","some","_ref","abs","player1","player2","_initializePlayer","Player","humanPlayer","computerPlayer","playerBoard","computerBoard","shipPlacementDialog","querySelector","showModal","playerBoardDOM","computerBoardDOM","createBoardDOM","instruction","changeAxis","shipBoardDOM","currShipIndex","currShip","isHorizontal","addEventListener","textContent","event","target","contains","className","concat","highlightCells","parseInt","dataset","remove","removeHighLight","string","pCell","highLightShipCell","close","charAt","toUpperCase","slice","shipPlacementHandler","isUserTurn","userClickCount","handleUserAttack","_computerPlayer$rando","handleComputerAttack","gameBoard2","winner","resetGameDialog","h3","resetBtn","window","location","reload","displayWinner","battlefieldHandler"],"sourceRoot":""}